buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.3'
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'artifactory-publish'

group = 'org.10ne'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
}

dependencies {
    compile('org.codehaus.groovy:groovy-all:2.3.6')
    compile('commons-cli:commons-cli:1.2')
    compile('com.google.inject:guice:4.0-beta4')
    compile('org.10ne:sgvm:0.0.1.5')
    compile('ch.qos.logback:logback-classic:1.1.2')
    compile('ch.qos.logback:logback-core:1.1.2')
    testCompile('cglib:cglib-nodep:3.1')
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0')
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

jar.dependsOn sourceJar

task assembleManifestAttributes {
    doLast {
        jar {
            manifest {
                attributes('Main-Class': 'org._10ne.grails.windtunnel.executor.Main',
                        'Class-Path': configurations.runtime.collect { it.name }.join(' '))
            }
        }
    }
}

jar.dependsOn assembleManifestAttributes

task zip(type: Zip) {
    def innerDir = "${project.name}-$version"
    into(innerDir) {
        into('lib') {
            from configurations.runtime
            from jar.archivePath
        }
        from(sourceSets.main.resources) {
            include('*.sh')
            fileMode = 0755
        }
    }
}

zip.dependsOn jar

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repoKey = 'libs-release'
    }
    publish {
        defaults {
            publishArtifacts = true
        }
    }
}


publishing {
    publications {
        gpw(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier 'source'
            }
            artifact zip
        }
    }
}

artifactoryPublish {
    publications(publishing.publications.gpw)
}

idea {
    project {
        jdkName = '1.7'
        languageLevel = '1.7'
        wildcards += '?*.gradle;?*.js'
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                // Use git
                def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
                vcsConfig.mapping[0].'@vcs' = 'Git'
            }
        }
    }
    module {
        downloadSources = true
    }
}
